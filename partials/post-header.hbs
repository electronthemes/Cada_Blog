<div class="max-w-[1016px] mx-auto">

    {{!-- Bradcamb --}}
    <div class="flex items-center gap-[14px] xs:justify-center sm:justify-start">
        <a href="https://cada.com/en/"
            class="flex items-center gap-[5px] text-xs leading-[22px] text-black py-1 px-3 rounded-[32px] bg-[#EEEFF0]">
            {{> redesign/icons/home}}
            Cada
        </a>
        <span class="block w-[6px]">
            {{> redesign/icons/bradcamb-right-arrow}}
        </span>
        <a href="{{@site.url}}" class=" text-black text-xs leading-none">Blog</a>
        <span class="block w-[6px]">
            {{> redesign/icons/bradcamb-right-arrow}}
        </span>
        {{#foreach tags limit="1"}}
        <a href="{{url}}" class=" text-black text-xs leading-none whitespace-nowrap hidden xs:block">{{name}}</a>
        {{/foreach}}
        <span class="w-[6px] hidden xs:block">
            {{> redesign/icons/bradcamb-right-arrow}}
        </span>
        <p class=" text-[#777C85] text-xs leading-none w-full whitespace-nowrap overflow-hidden text-ellipsis">{{title}}</p>
    </div>
    {{!-- Content --}}
    <h1 class="text-[34px] xs:text-[44px] md:text-[56px] !leading-[1.3] font-semibold font-Jakarta mt-6 sm:mt-8">
        {{title}}
    </h1>
     <div class="relative before:absolute sm:before:hidden before:top-1/2 before:right-0 post_header-scroll_section before:transform before:-translate-y-1/2 before:w-[36px] before:h-full before:z-10 popup-activation-class">
    
        <div class="py-3 sm:py-8 mt-6 sm:mt-8 border-t sm:border-y border-border_color flex items-center gap-2 md:gap-16 justify-between overflow-auto overflow-y-hidden scrollbar-style get-section-top">
            <ul class="flex gap-2 sm:gap-4">
                {{!-- {{#foreach tags}}
                <li class=" text-xs leading-[20px] xs:text-sm xs:leading-[22px] tracking-[-0.01px] text-[#777C85] flex items-center gap-[6px] whitespace-nowrap px-4 sm:px-0 py-2 sm:py-0 rounded-lg sm:rounded-none bg-[#F8F8F8] sm:bg-transparent author-tag">
                    Autor:
                    <a class="text-[#DE893E] font-medium author-tag-text" href="/experts/#editors" data-slug="{{slug}}">{{name}}</a>
                </li>
                {{/foreach}} --}}
                 {{> redesign/post-editors}}
                {{> redesign/post-reviewers}}
            </ul>
            <ul class="flex gap-2 md:gap-3 mr-5 sm:mr-0">
                <li class=" text-xs leading-[20px] xs:text-sm xs:leading-[22px] tracking-[-0.01px] text-[#777C85] flex items-center gap-[6px] whitespace-nowrap px-4 sm:px-0 py-2 sm:py-0 rounded-lg sm:rounded-none bg-[#F8F8F8] sm:bg-transparent">
                    {{> redesign/icons/clock}}
                    Lesezeit:
                    <span class="text-black font-medium"> {{reading_time minute="Nur eine Minute" minutes="% min"}}</span>
                </li>
                <li class="w-[1px] bg-border_color hidden sm:block"></li>
                <li class="text-xs leading-[20px] xs:text-sm xs:leading-[22px] tracking-[-0.01px] text-[#777C85] flex items-center gap-[6px] whitespace-nowrap px-4 sm:px-0 py-2 sm:py-0 rounded-lg sm:rounded-none bg-[#F8F8F8] sm:bg-transparent">
                    {{> redesign/icons/calender}}
                    Ver√∂ffentlichungs datum:
                    <span class="text-black font-medium">{{date format="DD/MM/YYYY"}}</span>
                </li>
            </ul>
        </div>
    </div>
</div>

<script>
    const reviewerTag = document.querySelectorAll('.reviewer-tag');
    const reviewerTagText = document.querySelector('.reviewer-tag-text');
    const activationClass = document.querySelector('.popup-activation-class')
    reviewerTag.forEach((tag , index) => {
        const singleTags = tag.children[0]
        if(singleTags.getAttribute('data-slug').includes('reviewer-')) {
           singleTags.textContent = singleTags.textContent.replace('reviewer', '').trim();
           singleTags.textContent = singleTags.textContent.replace('Reviewer', '').trim();

           //reviewer bio text content call here
            const reviewerBioText = tag.querySelector('.reviewer-bio-text');
            const reviewerBioTextCatch =  tag.querySelector('.experts-bio');
            if(reviewerBioTextCatch == null) {
                if(reviewerBioText){
                    reviewerBioText.remove();
                }
            }else{
                reviewerBioText.innerHTML = reviewerBioTextCatch.innerHTML;
            }

            ///popup queary here
            document.querySelector('.reviewer_popup').classList.add('popup-closed');
            const getSectionTop = document.querySelector('.get-section-top');
            const reviewerPopup = document.querySelector('.reviewer_popup_area');
            const div = `${reviewerPopup}`;
            getSectionTop.insertAdjacentHTML('afterend', reviewerPopup.innerHTML);

            document.querySelector('.reviewer-tag').addEventListener('mouseenter', (e) => {
                e.stopPropagation();
                
                activationClass.classList.remove('editor-popup-show');
                activationClass.classList.add('reviewer-popup-show');
            })

            document.querySelector('.reviewer-tag').addEventListener('touchstart', (e) => {
                e.stopPropagation();
                activationClass.classList.remove('editor-popup-show');
                activationClass.classList.add('reviewer-popup-show');
            })

            document.querySelector('body').addEventListener('click', (e) => {
                const popupActivation = document.querySelector('.popup-activation-class')
                if(!popupActivation.contains(e.target)){
                        popupActivation.classList.remove('reviewer-popup-show');
                }
                
            })
           
        }else{
            tag.remove();
        }
    })

    const authorTags = document.querySelector('.author-tag');
    if(!authorTags) {
        console.log("not author")
        activationClass.classList.add("only-reviewer-popup");
    }else{
        activationClass.classList.remove("only-reviewer-popup");
        console.log("show author")
    }
    
</script>
<script>
    const authorTag = document.querySelectorAll('.author-tag');
    authorTag.forEach(tag => {
        const singleTags = tag.children[0]
        if(singleTags.getAttribute('data-slug').includes('editors-')) {
           singleTags.textContent = singleTags.textContent.replace('editors', '').trim();
           singleTags.textContent = singleTags.textContent.replace('Editors', '').trim();

           //reviewer bio text content call here
            const editorsBioText = tag.querySelector('.editors-bio-text');
            const editorsBioTextCatch =  tag.querySelector('.experts-bio');
            if(editorsBioTextCatch == null) {
                if(editorsBioText){
                    editorsBioText.remove();
                }
            }else{
                editorsBioText.innerHTML = editorsBioTextCatch.innerHTML;
                
            }

            ///popup queary here
            document.querySelector('.editors_popup').classList.add('popup-closed');
            const getSectionTop = document.querySelector('.get-section-top');
            const editorsPopup = document.querySelector('.editors_popup_area');
            const div = `${editorsPopup}`;
            getSectionTop.insertAdjacentHTML('afterend', editorsPopup.innerHTML);

            document.querySelector('.author-tag').addEventListener('mouseenter', (e) => {
                e.stopPropagation();
                activationClass.classList.remove('reviewer-popup-show');
                activationClass.classList.add('editor-popup-show');
            })

            document.querySelector('.author-tag').addEventListener('touchstart', (e) => {
                e.stopPropagation();
                activationClass.classList.remove('reviewer-popup-show');
                activationClass.classList.add('editor-popup-show');
            })

            document.querySelector('body').addEventListener('click', (e) => {
                const popupActivation = document.querySelector('.popup-activation-class')
                if(!popupActivation.contains(e.target)){
                        popupActivation.classList.remove('editor-popup-show');
                }
                
            })
        }else{
            tag.remove();
        }
        // Function to check if the user has scrolled to a certain point
        function checkScroll() {
            var scrollY = window.scrollY || window.pageYOffset;
            
            // Adjust the threshold as needed
            var triggerPoint = 10;
            
            // Load the Twitter script when the user scrolls past the trigger point
            if (scrollY) {
                // Remove the scroll event listener to avoid multiple script loads
                activationClass.classList.remove('reviewer-popup-show');
                activationClass.classList.remove('editor-popup-show');
            }
        }
        // Attach the scroll event listener
        window.addEventListener('scroll', checkScroll);
    })
</script>
{{!-- 
<script>
    const checkerTag = document.querySelectorAll('.checkers-tag');
    const checkerTagText = document.querySelector('.checkers-tag-text');
    checkerTag.forEach(tag => {
        const singleTags = tag.children[0]
        if(singleTags.getAttribute('data-slug').includes('checker-')) {
           singleTags.textContent = singleTags.textContent.replace('checker', '').trim();
           singleTags.textContent = singleTags.textContent.replace('Checker', '').trim();
        }else{
            tag.remove();
        }
    })
    const authorTag = document.querySelectorAll('.author-tag');
    authorTag.forEach(tag => {
        const singleTags = tag.children[0]
        if(singleTags.getAttribute('data-slug').includes('editors-')) {
           singleTags.textContent = singleTags.textContent.replace('editors', '').trim();
           singleTags.textContent = singleTags.textContent.replace('Editors', '').trim();
        }else{
            tag.remove();
        }
    })
</script> --}}

